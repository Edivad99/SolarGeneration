import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask
import static org.apache.commons.lang3.StringUtils.repeat

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.57'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.81.4'
    id 'me.modmuss50.mod-publish-plugin' version '0.4.5'
}

version = "$minecraft_version-$mod_version"
group = "edivad.solargeneration"
base.archivesName = 'SolarGeneration'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println(repeat('*', 60))
println("Project Version: $version")
println("Java: ${System.getProperty('java.version')}")
println("JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')})")
println("Arch: ${System.getProperty('os.arch')}")
println(repeat('*', 60))

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
    }

    server {
        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--mod', 'solargeneration', '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'JEI'
        url 'https://maven.blamejared.com/'
    }
    maven {
        name 'curseforge'
        url 'https://www.cursemaven.com'
    }
    flatDir {
        dir 'libs'
    }
}

dependencies {
    implementation "net.neoforged:neoforge:$neo_version"

    //implementation fg.deobf("edivad:EdivadLib-$minecraft_version:2.0.0")
    implementation "curse.maven:edivadlib-638508:$edivadlib_id"

    //runtimeOnly fg.deobf("mezz.jei:jei-$minecraft_version-forge:$jei_version")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(["-Xmaxerrs", "100000"])
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
        minecraft_version       : minecraft_version,
        minecraft_version_range : minecraft_version_range,
        neo_version             : neo_version,
        neo_version_range       : neo_version_range,
        loader_version_range    : loader_version_range,
        mod_version             : mod_version,
        edivadlib_version_range : edivadlib_version_range,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            'Specification-Title'     : 'solargeneration',
            'Specification-Vendor'    : 'Edivad99',
            'Specification-Version'   : '1',
            'Implementation-Title'    : 'solargeneration',
            'Implementation-Version'  : project.version,
            'Implementation-Vendor'   : 'Edivad99',
            'Implementation-Commit'   : 'git rev-parse HEAD'.execute().text.trim(),
        ])
    }
}

tasks.register('makeChangelog', GitChangelogTask) {
    fromRepo = projectDir.absolutePath.toString()
    fromRevision = '69e1d1fe0b7538af87a722b6c2157da4dde14983'
    toRevision = 'HEAD'
    file = file('CHANGELOG.md')
    untaggedName = 'Next release'
    templateContent = file('changelog.mustache').text
}

publishMods {
    displayName = "SolarGeneration-$minecraft_version-$mod_version"
    version = mod_version
    type = STABLE

    def changelogFile = file('CHANGELOG.md')
    changelog = changelogFile.exists() ? changelogFile.text : 'CHANGELOG.md not found'

    modLoaders.add('neoforge')
    file = jar.archiveFile

    curseforge {
        projectId = '336538'
        accessToken = providers.environmentVariable('CURSEFORGE_TOKEN')
        minecraftVersions.add(minecraft_version)
        requires {
            slug = 'edivadlib'
        }
    }
    modrinth {
        projectId = 'jfd8j2j2'
        accessToken = providers.environmentVariable('MODRINTH_TOKEN')
        minecraftVersions.add(minecraft_version)
        requires {
            slug = 'edivadlib'
        }
    }
}